<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button onclick="login()">Login</button>
    <script src="/static/js/libs/socket.io.min.js"></script>
    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        function generateSalt(length = 16) 
        {
            const array = new Uint8Array(length);
            window.crypto.getRandomValues(array);
            return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
        }

        async function hashing(password, salt)
        {
            const combined = password + salt;
            const encoder = new TextEncoder();
            const encodedData = encoder.encode(combined);
            const hashBuffer = await crypto.subtle.digest('SHA-256', encodedData);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            return hashHex;
        }

        function get_salt(username, socket) 
        {
            return new Promise((resolve, reject) => {
                socket.emit("get_salt", username, (res) => {
                    resolve(res);
                });
            });
        }

        // login function to well login...
        async function login() 
        {
            const socket = io()
            let loginURL = "{{ url_for('login_user') }}";
            let username = $("#username").val();
            let password = $("#password").val();
            let res;
            try
            {
                let salt = await get_salt(username, socket);
                let hashed_password = await hashing(password, salt) 
                res = await axios.post(loginURL, {
                username: username,
                password: hashed_password
                })
                if (!isValidURL(res.data)) 
                {
                    alert(res.data);
                    return;
                }
                window.open(res.data, "_self")
            }
            catch(error)
            {
                console.log('Error ', error);
            }
        }
    </script>
{% endblock %}
